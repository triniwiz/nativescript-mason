// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Mason
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import Mason
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct Line<T> {
  public init(_ start: T, _ end: T)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(LineGridPlacementCompat) public class LineGridPlacementCompat : ObjectiveC.NSObject {
  @objc public var start: Mason.GridPlacementCompat {
    get
  }
  @objc public var end: Mason.GridPlacementCompat {
    get
  }
  @objc deinit
}
@objcMembers @objc(MinMax) public class MinMax : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(_ min: Mason.MinSizing, _ max: Mason.MaxSizing)
  @objc public static func Points(points: Swift.Float) -> Mason.MinMax
  @objc public static func Percent(percent: Swift.Float) -> Mason.MinMax
  @objc public static func Flex(flex: Swift.Float) -> Mason.MinMax
  @objc public static func FitContent(fit: Swift.Float) -> Mason.MinMax
  @objc public static func FitContentPercent(fit: Swift.Float) -> Mason.MinMax
  @objc public static let Auto: Mason.MinMax
  @objc public static func fromTypeValue(_ minType: Swift.Int, _ minValue: Swift.Float, _ maxType: Swift.Int, _ maxValue: Swift.Float) -> Mason.MinMax?
  @objc public var cssValue: Swift.String {
    @objc get
  }
  @objc public var jsonValue: Swift.String? {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NSCMason) @objcMembers public class NSCMason : ObjectiveC.NSObject {
  @objc public var nativePtr: Swift.OpaquePointer? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
  @objc public func clear()
  @objc public static let instance: Mason.NSCMason
  @objc public static var shared: Swift.Bool
  @objc public static var alwaysEnable: Swift.Bool
}
@_inheritsConvenienceInitializers @objcMembers @objc(MeasureOutput) public class MeasureOutput : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(MaxSizing) public class MaxSizing : ObjectiveC.NSObject, Swift.Codable {
  @objc public var value: Swift.Float {
    get
  }
  @objc public static func Points(_ points: Swift.Float) -> Mason.MaxSizing
  @objc public static func Percent(_ percent: Swift.Float) -> Mason.MaxSizing
  @objc public static func FitContent(_ fit: Swift.Float) -> Mason.MaxSizing
  @objc public static func FitContentPercent(_ fit: Swift.Float) -> Mason.MaxSizing
  @objc public static func Fraction(_ flex: Swift.Float) -> Mason.MaxSizing
  @objc public static let Auto: Mason.MaxSizing
  @objc public static let MinContent: Mason.MaxSizing
  @objc public static let MaxContent: Mason.MaxSizing
  @objc public var cssValue: Swift.String {
    @objc get
  }
  @objc public var jsonValue: Swift.String? {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(MasonDimensionSizeCompat) public class MasonDimensionSizeCompat : ObjectiveC.NSObject {
  @objc public var width: Mason.MasonDimensionCompat
  @objc public var height: Mason.MasonDimensionCompat
  public init(_ size: Mason.MasonSize<Mason.MasonDimension>)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(MasonLengthPercentageAutoSizeCompat) public class MasonLengthPercentageAutoSizeCompat : ObjectiveC.NSObject {
  @objc public var width: Mason.MasonLengthPercentageAutoCompat
  @objc public var height: Mason.MasonLengthPercentageAutoCompat
  public init(_ size: Mason.MasonSize<Mason.MasonLengthPercentageAuto>)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(MasonLengthPercentageSizeCompat) public class MasonLengthPercentageSizeCompat : ObjectiveC.NSObject {
  @objc public var width: Mason.MasonLengthPercentageCompat
  @objc public var height: Mason.MasonLengthPercentageCompat
  public init(_ size: Mason.MasonSize<Mason.MasonLengthPercentage>)
  @objc deinit
}
public struct MasonSize<T> {
  public init(_ width: T, _ height: T)
  public init(uniform: T)
}
public let MasonDimensionSizeAuto: Mason.MasonSize<Mason.MasonDimension>
public let MasonLengthPercentageAutoSizeAuto: Mason.MasonSize<Mason.MasonLengthPercentageAuto>
public let MasonDimensionSizeMaxPercentWH: Mason.MasonSize<Mason.MasonDimension>
public let MasonLengthPercentageAutoSizeMaxPercentWH: Mason.MasonSize<Mason.MasonLengthPercentageAuto>
public let MasonLengthPercentageSizeMaxPercentWH: Mason.MasonSize<Mason.MasonLengthPercentage>
public let MasonDimensionSizeZero: Mason.MasonSize<Mason.MasonDimension>
public let MasonLengthPercentageAutoSizeZero: Mason.MasonSize<Mason.MasonLengthPercentageAuto>
public let MasonLengthPercentageSizeZero: Mason.MasonSize<Mason.MasonLengthPercentage>
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(MasonNode) @objcMembers public class MasonNode : ObjectiveC.NSObject {
  @objc public var nativePtr: Swift.OpaquePointer? {
    get
  }
  public typealias MeasureFunc = (CoreFoundation.CGSize?, CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @objc public var style: Mason.MasonStyle {
    @objc get
    @objc set
  }
  @objc public var includeInLayout: Swift.Bool
  @objc public var isEnabled: Swift.Bool
  @objc public var data: Swift.AnyObject? {
    @objc get
    @objc set
  }
  @objc public var owner: Mason.MasonNode? {
    get
  }
  @objc public var children: [Mason.MasonNode] {
    get
  }
  @objc override dynamic public init()
  @objc public init(style: Mason.MasonStyle)
  @objc public init(style: Mason.MasonStyle, children: [Mason.MasonNode])
  public init(style: Mason.MasonStyle, measureFunc: @escaping Mason.MasonNode.MeasureFunc)
  @objc deinit
  @objc public func updateNodeStyle()
  @objc @discardableResult
  public func layout() -> Mason.MasonLayout
  @objc public var isDirty: Swift.Bool {
    @objc get
  }
  @objc public func markDirty()
  @objc public func getRoot() -> Mason.MasonNode?
  @objc public func rootCompute()
  @objc public func rootCompute(_ width: Swift.Float, _ height: Swift.Float)
  @objc public func rootComputeMaxContent()
  @objc public func rootComputeMinContent()
  @objc public func rootComputeWithViewSize()
  @objc public func rootComputeWithViewSize(layout: Swift.Bool)
  @objc public func rootComputeWithMaxContent()
  @objc public func compute()
  @objc public func compute(_ width: Swift.Float, _ height: Swift.Float)
  @objc public func computeMaxContent()
  @objc public func computeMinContent()
  @objc public func computeWithSize(_ width: Swift.Float, _ height: Swift.Float)
  @objc public func computeWithViewSize()
  @objc public func computeWithViewSize(layout: Swift.Bool)
  @objc public func computeWithMaxContent()
  @objc public func computeWithMinContent()
  @objc public func attachAndApply()
  @objc public func setChildren(children: [Mason.MasonNode])
  @objc public func addChildren(_ children: [Mason.MasonNode])
  @objc public var isLeaf: Swift.Bool {
    @objc get
  }
  @objc public func configure(_ block: (Mason.MasonNode) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(MinSizing) public class MinSizing : ObjectiveC.NSObject, Swift.Codable {
  @objc public var value: Swift.Float {
    get
  }
  @objc public static func Points(_ points: Swift.Float) -> Mason.MinSizing
  @objc public static func Percent(_ percent: Swift.Float) -> Mason.MinSizing
  @objc public static let Auto: Mason.MinSizing
  @objc public static let MinContent: Mason.MinSizing
  @objc public static let MaxContent: Mason.MinSizing
  @objc public var cssValue: Swift.String {
    @objc get
  }
  @objc public var jsonValue: Swift.String? {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(MasonLayout) @objcMembers public class MasonLayout : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let order: Swift.Int
  @objc final public let x: Swift.Float
  @objc final public let y: Swift.Float
  @objc final public let width: Swift.Float
  @objc final public let height: Swift.Float
  @objc final public let children: [Mason.MasonLayout]
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objcMembers @objc(MasonReexports) public class MasonReexports : ObjectiveC.NSObject {
  @objc public static func node_set_style(_ mason: Swift.OpaquePointer?, _ node: Swift.OpaquePointer?, _ style: Swift.OpaquePointer?)
  @objc public static func node_compute(_ mason: Swift.OpaquePointer?, _ node: Swift.OpaquePointer?)
  @objc public static func node_compute_wh(_ mason: Swift.OpaquePointer?, _ node: Swift.OpaquePointer?, width: Swift.Float, height: Swift.Float)
  @objc public static func node_compute_max_content(_ mason: Swift.OpaquePointer?, _ node: Swift.OpaquePointer?)
  @objc public static func node_compute_min_content(_ mason: Swift.OpaquePointer?, _ node: Swift.OpaquePointer?)
  @objc public static func node_dirty(_ mason: Swift.OpaquePointer?, _ node: Swift.OpaquePointer?) -> Swift.Bool
  @objc public static func node_mark_dirty(_ mason: Swift.OpaquePointer?, _ node: Swift.OpaquePointer?)
  @objc public static func style_get_display(_ style: Swift.OpaquePointer?) -> Swift.Int32
  @objc public static func style_set_display(_ style: Swift.OpaquePointer?, _ display: Swift.Int32)
  @objc public static func style_get_position(_ style: Swift.OpaquePointer?) -> Swift.Int32
  @objc public static func style_set_position(_ style: Swift.OpaquePointer?, _ position: Swift.Int32)
  @objc public static func style_get_direction(_ style: Swift.OpaquePointer?) -> Swift.Int32
  @objc public static func style_set_direction(_ style: Swift.OpaquePointer?, _ direction: Swift.Int32)
  @objc public static func style_get_flex_direction(_ style: Swift.OpaquePointer?) -> Swift.Int32
  @objc public static func style_set_flex_direction(_ style: Swift.OpaquePointer?, _ flex_direction: Swift.Int32)
  @objc public static func style_get_flex_wrap(_ style: Swift.OpaquePointer?) -> Swift.Int32
  @objc public static func style_set_flex_wrap(_ style: Swift.OpaquePointer?, _ flex_wrap: Swift.Int32)
  @objc public static func style_set_overflow(_ style: Swift.OpaquePointer?, _ overflow: Swift.Int32)
  @objc public static func style_set_overflow_x(_ style: Swift.OpaquePointer?, _ overflow: Swift.Int32)
  @objc public static func style_set_overflow_y(_ style: Swift.OpaquePointer?, _ overflow: Swift.Int32)
  @objc public static func style_get_overflow_x(_ style: Swift.OpaquePointer?) -> Swift.Int32
  @objc public static func style_get_overflow_y(_ style: Swift.OpaquePointer?) -> Swift.Int32
  @objc public static func style_get_align_items(_ style: Swift.OpaquePointer?) -> Swift.Int32
  @objc public static func style_set_align_items(_ style: Swift.OpaquePointer?, _ align_items: Swift.Int32)
  @objc public static func style_get_align_self(_ style: Swift.OpaquePointer?) -> Swift.Int32
  @objc public static func style_set_align_self(_ style: Swift.OpaquePointer?, _ align_self: Swift.Int32)
  @objc public static func style_get_align_content(_ style: Swift.OpaquePointer?) -> Swift.Int32
  @objc public static func style_set_align_content(_ style: Swift.OpaquePointer?, _ align_content: Swift.Int32)
  @objc public static func style_get_justify_items(_ style: Swift.OpaquePointer?) -> Swift.Int32
  @objc public static func style_set_justify_items(_ style: Swift.OpaquePointer?, _ align_items: Swift.Int32)
  @objc public static func style_get_justify_self(_ style: Swift.OpaquePointer?) -> Swift.Int32
  @objc public static func style_set_justify_self(_ style: Swift.OpaquePointer?, _ align_self: Swift.Int32)
  @objc public static func style_get_justify_content(_ style: Swift.OpaquePointer?) -> Swift.Int32
  @objc public static func style_set_justify_content(_ style: Swift.OpaquePointer?, _ justify_content: Swift.Int32)
  @objc public static func style_set_inset(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageAutoType)
  @objc public static func style_get_inset_left(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentageAuto
  @objc public static func style_set_inset_left(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageAutoType)
  @objc public static func style_get_inset_right(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentageAuto
  @objc public static func style_set_inset_right(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageAutoType)
  @objc public static func style_get_inset_top(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentageAuto
  @objc public static func style_set_inset_top(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageAutoType)
  @objc public static func style_get_inset_bottom(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentageAuto
  @objc public static func style_set_inset_bottom(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageAutoType)
  @objc public static func style_set_margin(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageAutoType)
  @objc public static func style_get_margin_left(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentageAuto
  @objc public static func style_set_margin_left(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageAutoType)
  @objc public static func style_get_margin_right(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentageAuto
  @objc public static func style_set_margin_right(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageAutoType)
  @objc public static func style_get_margin_top(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentageAuto
  @objc public static func style_set_margin_top(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageAutoType)
  @objc public static func style_get_margin_bottom(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentageAuto
  @objc public static func style_set_margin_bottom(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageAutoType)
  @objc public static func style_set_padding(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageType)
  @objc public static func style_get_padding_left(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentage
  @objc public static func style_set_padding_left(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageType)
  @objc public static func style_get_padding_right(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentage
  @objc public static func style_set_padding_right(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageType)
  @objc public static func style_get_padding_top(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentage
  @objc public static func style_set_padding_top(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageType)
  @objc public static func style_get_padding_bottom(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentage
  @objc public static func style_set_padding_bottom(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageType)
  @objc public static func style_set_border(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageType)
  @objc public static func style_get_border_left(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentage
  @objc public static func style_set_border_left(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageType)
  @objc public static func style_get_border_right(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentage
  @objc public static func style_set_border_right(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageType)
  @objc public static func style_get_border_top(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentage
  @objc public static func style_set_border_top(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageType)
  @objc public static func style_get_border_bottom(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentage
  @objc public static func style_set_border_bottom(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageType)
  @objc public static func style_get_flex_grow(_ style: Swift.OpaquePointer?) -> Swift.Float
  @objc public static func style_set_flex_grow(_ style: Swift.OpaquePointer?, _ value: Swift.Float)
  @objc public static func style_set_border_bottom(_ style: Swift.OpaquePointer?, _ value: Swift.Float)
  @objc public static func style_get_flex_shrink(_ style: Swift.OpaquePointer?) -> Swift.Float
  @objc public static func style_set_flex_shrink(_ style: Swift.OpaquePointer?, _ value: Swift.Float)
  @objc public static func style_set_flex_basis(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_flex_basis(_ style: Swift.OpaquePointer?) -> Mason.CMasonDimension
  @objc public static func style_set_scrollbar_width(_ style: Swift.OpaquePointer?, _ value: Swift.Float)
  @objc public static func style_get_scrollbar_width(_ style: Swift.OpaquePointer?) -> Swift.Float
  @objc public static func style_get_width(_ style: Swift.OpaquePointer?) -> Mason.CMasonDimension
  @objc public static func style_set_width(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_height(_ style: Swift.OpaquePointer?) -> Mason.CMasonDimension
  @objc public static func style_set_height(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_min_width(_ style: Swift.OpaquePointer?) -> Mason.CMasonDimension
  @objc public static func style_set_min_width(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_min_height(_ style: Swift.OpaquePointer?) -> Mason.CMasonDimension
  @objc public static func style_set_min_height(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_max_width(_ style: Swift.OpaquePointer?) -> Mason.CMasonDimension
  @objc public static func style_set_max_width(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_max_height(_ style: Swift.OpaquePointer?) -> Mason.CMasonDimension
  @objc public static func style_set_max_height(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_gap(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentageSize
  @objc public static func style_set_gap(_ style: Swift.OpaquePointer?, _ width_value: Swift.Float, _ width_type: Mason.CMasonLengthPercentageType, _ height_value: Swift.Float, _ height_type: Mason.CMasonLengthPercentageType)
  @objc public static func style_get_row_gap(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentage
  @objc public static func style_set_row_gap(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageType)
  @objc public static func style_get_column_gap(_ style: Swift.OpaquePointer?) -> Mason.CMasonLengthPercentage
  @objc public static func style_set_column_gap(_ style: Swift.OpaquePointer?, _ value: Swift.Float, _ value_type: Mason.CMasonLengthPercentageType)
  @objc public static func style_get_aspect_ratio(_ style: Swift.OpaquePointer?) -> Swift.Float
  @objc public static func style_set_aspect_ratio(_ style: Swift.OpaquePointer?, _ value: Swift.Float)
  @objc public static func style_get_grid_auto_rows(_ style: Swift.OpaquePointer?) -> Swift.UnsafeMutablePointer<Mason.CMasonNonRepeatedTrackSizingFunctionArray>
  @objc public static func style_set_grid_auto_rows(_ style: Swift.OpaquePointer?, _ value: Swift.UnsafeMutablePointer<Mason.CMasonNonRepeatedTrackSizingFunctionArray>)
  @objc public static func style_get_grid_auto_columns(_ style: Swift.OpaquePointer?) -> Swift.UnsafeMutablePointer<Mason.CMasonNonRepeatedTrackSizingFunctionArray>
  @objc public static func style_set_grid_auto_columns(_ style: Swift.OpaquePointer?, _ value: Swift.UnsafeMutablePointer<Mason.CMasonNonRepeatedTrackSizingFunctionArray>)
  @objc public static func style_get_grid_auto_flow(_ style: Swift.OpaquePointer?) -> Swift.Int32
  @objc public static func style_set_grid_auto_flow(_ style: Swift.OpaquePointer?, _ value: Swift.Int32)
  @objc public static func style_set_grid_area(_ style: Swift.OpaquePointer?, _ row_start: Mason.CMasonGridPlacement, _ row_end: Mason.CMasonGridPlacement, _ column_start: Mason.CMasonGridPlacement, _ column_end: Mason.CMasonGridPlacement)
  @objc public static func style_set_grid_column(_ style: Swift.OpaquePointer?, _ start: Mason.CMasonGridPlacement, _ end: Mason.CMasonGridPlacement)
  @objc public static func style_get_grid_column_start(_ style: Swift.OpaquePointer?) -> Mason.CMasonGridPlacement
  @objc public static func style_set_grid_column_start(_ style: Swift.OpaquePointer?, _ value: Mason.CMasonGridPlacement)
  @objc public static func style_get_grid_column_end(_ style: Swift.OpaquePointer?) -> Mason.CMasonGridPlacement
  @objc public static func style_set_grid_column_end(_ style: Swift.OpaquePointer?, _ value: Mason.CMasonGridPlacement)
  @objc public static func style_set_grid_row(_ style: Swift.OpaquePointer?, _ start: Mason.CMasonGridPlacement, _ end: Mason.CMasonGridPlacement)
  @objc public static func style_get_grid_row_start(_ style: Swift.OpaquePointer?) -> Mason.CMasonGridPlacement
  @objc public static func style_set_grid_row_start(_ style: Swift.OpaquePointer?, _ value: Mason.CMasonGridPlacement)
  @objc public static func style_get_grid_row_end(_ style: Swift.OpaquePointer?) -> Mason.CMasonGridPlacement
  @objc public static func style_set_grid_row_end(_ style: Swift.OpaquePointer?, _ value: Mason.CMasonGridPlacement)
  @objc public static func style_get_grid_template_rows(_ style: Swift.OpaquePointer?) -> Swift.UnsafeMutablePointer<Mason.CMasonTrackSizingFunctionArray>
  @objc public static func style_set_grid_template_rows(_ style: Swift.OpaquePointer?, _ value: Swift.UnsafeMutablePointer<Mason.CMasonTrackSizingFunctionArray>)
  @objc public static func style_get_grid_template_columns(_ style: Swift.OpaquePointer?) -> Swift.UnsafeMutablePointer<Mason.CMasonTrackSizingFunctionArray>
  @objc public static func style_set_grid_template_columns(_ style: Swift.OpaquePointer?, _ value: Swift.UnsafeMutablePointer<Mason.CMasonTrackSizingFunctionArray>)
  @objc public static func destroy(nonRepeatedTrackSizingFunctionArray: Swift.UnsafeMutablePointer<Mason.CMasonNonRepeatedTrackSizingFunctionArray>)
  @objc public static func destroy(trackSizingFunctionArray: Swift.UnsafeMutablePointer<Mason.CMasonTrackSizingFunctionArray>)
  @objc public static func util_parse_non_repeated_track_sizing_function(_ value: Swift.UnsafeMutablePointer<Mason.CMasonNonRepeatedTrackSizingFunctionArray>) -> Swift.String
  @objc public static func util_parse_auto_repeating_track_sizing_function(_ value: Swift.UnsafeMutablePointer<Mason.CMasonTrackSizingFunctionArray>) -> Swift.String
  @objc public static func util_create_non_repeated_track_sizing_function_with_type_value(_ track_type: Swift.Int32, _ track_value: Swift.Float) -> Mason.CMasonMinMax
  @objc public static func style_update_with_values(_ style: Swift.OpaquePointer?, _ display: Swift.Int32, _ position: Swift.Int32, _ direction: Swift.Int32, _ flexDirection: Swift.Int32, _ flexWrap: Swift.Int32, _ overflow: Swift.Int32, _ alignItems: Swift.Int32, _ alignSelf: Swift.Int32, _ alignContent: Swift.Int32, _ justifyItems: Swift.Int32, _ justifySelf: Swift.Int32, _ justifyContent: Swift.Int32, _ insetLeftType: Swift.Int32, _ insetLeftValue: Swift.Float, _ insetRightType: Swift.Int32, _ insetRightValue: Swift.Float, _ insetTopType: Swift.Int32, _ insetTopValue: Swift.Float, _ insetBottomType: Swift.Int32, _ insetBottomValue: Swift.Float, _ marginLeftType: Swift.Int32, _ marginLeftValue: Swift.Float, _ marginRightType: Swift.Int32, _ marginRightValue: Swift.Float, _ marginTopType: Swift.Int32, _ marginTopValue: Swift.Float, _ marginBottomType: Swift.Int32, _ marginBottomValue: Swift.Float, _ paddingLeftType: Swift.Int32, _ paddingLeftValue: Swift.Float, _ paddingRightType: Swift.Int32, _ paddingRightValue: Swift.Float, _ paddingTopType: Swift.Int32, _ paddingTopValue: Swift.Float, _ paddingBottomType: Swift.Int32, _ paddingBottomValue: Swift.Float, _ borderLeftType: Swift.Int32, _ borderLeftValue: Swift.Float, _ borderRightType: Swift.Int32, _ borderRightValue: Swift.Float, _ borderTopType: Swift.Int32, _ borderTopValue: Swift.Float, _ borderBottomType: Swift.Int32, _ borderBottomValue: Swift.Float, _ flexGrow: Swift.Float, _ flexShrink: Swift.Float, _ flexBasisType: Swift.Int32, _ flexBasisValue: Swift.Float, _ widthType: Swift.Int32, _ widthValue: Swift.Float, _ heightType: Swift.Int32, _ heightValue: Swift.Float, _ minWidthType: Swift.Int32, _ minWidthValue: Swift.Float, _ minHeightType: Swift.Int32, _ minHeightValue: Swift.Float, _ maxWidthType: Swift.Int32, _ maxWidthValue: Swift.Float, _ maxHeightType: Swift.Int32, _ maxHeightValue: Swift.Float, _ gapRowType: Swift.Int32, _ gapRowValue: Swift.Float, _ gapColumnType: Swift.Int32, _ gapColumnValue: Swift.Float, _ aspectRatio: Swift.Float, _ gridAutoRows: Swift.UnsafeMutablePointer<Mason.CMasonNonRepeatedTrackSizingFunctionArray>, _ gridAutoColumns: Swift.UnsafeMutablePointer<Mason.CMasonNonRepeatedTrackSizingFunctionArray>, _ gridAutoFlow: Swift.Int32, _ gridColumnStartType: Swift.Int32, _ gridColumnStartValue: Swift.Int16, _ gridColumnEndType: Swift.Int32, _ gridColumnEndValue: Swift.Int16, _ gridRowStartType: Swift.Int32, _ gridRowStartValue: Swift.Int16, _ gridRowEndType: Swift.Int32, _ gridRowEndValue: Swift.Int16, _ gridTemplateRows: Swift.UnsafeMutablePointer<Mason.CMasonTrackSizingFunctionArray>, _ gridTemplateColumns: Swift.UnsafeMutablePointer<Mason.CMasonTrackSizingFunctionArray>, _ overflowX: Swift.Int32, _ overflowY: Swift.Int32, scrollBarWidth: Swift.Float)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(TrackSizingFunction) @objcMembers public class TrackSizingFunction : ObjectiveC.NSObject {
  @objc public var isRepeating: Swift.Bool {
    get
  }
  @objc public var value: Any? {
    @objc get
  }
  @objc public static func Single(_ value: Mason.MinMax) -> Mason.TrackSizingFunction
  @objc deinit
  @objc public static func AutoRepeat(_ gridTrackRepetition: Mason.GridTrackRepetition, _ value: Swift.Array<Mason.MinMax>) -> Mason.TrackSizingFunction
}
@_hasMissingDesignatedInitializers @objcMembers @objc(MasonDimensionCompat) public class MasonDimensionCompat : ObjectiveC.NSObject {
  @objc public init(points: Swift.Float)
  @objc public init(percent: Swift.Float)
  @objc public var type: Mason.MasonDimensionCompatType {
    @objc get
  }
  @objc public var value: Swift.Float {
    @objc get
  }
  @objc public var cssValue: Swift.String {
    @objc get
  }
  @objc public var jsonValue: Swift.String? {
    @objc get
  }
  @objc public static let Auto: Mason.MasonDimensionCompat
  @objc public static let Zero: Mason.MasonDimensionCompat
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(MasonLengthPercentageAutoCompat) public class MasonLengthPercentageAutoCompat : ObjectiveC.NSObject {
  @objc public init(points: Swift.Float)
  @objc public init(percent: Swift.Float)
  @objc public var type: Mason.MasonLengthPercentageAutoCompatType {
    @objc get
  }
  @objc public var value: Swift.Float {
    @objc get
  }
  @objc public var cssValue: Swift.String {
    @objc get
  }
  @objc public var jsonValue: Swift.String? {
    @objc get
  }
  @objc public static let Auto: Mason.MasonLengthPercentageAutoCompat
  @objc public static let Zero: Mason.MasonLengthPercentageAutoCompat
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(MasonLengthPercentageCompat) public class MasonLengthPercentageCompat : ObjectiveC.NSObject {
  @objc public init(points: Swift.Float)
  @objc public init(percent: Swift.Float)
  @objc public var type: Mason.MasonLengthPercentageCompatType {
    @objc get
  }
  @objc public var value: Swift.Float {
    @objc get
  }
  @objc public var cssValue: Swift.String {
    @objc get
  }
  @objc public var jsonValue: Swift.String? {
    @objc get
  }
  @objc public static let Zero: Mason.MasonLengthPercentageCompat
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(GridPlacementCompat) public class GridPlacementCompat : ObjectiveC.NSObject {
  @objc public init(span: Swift.Int16)
  @objc public init(line: Swift.Int16)
  @objc public var type: Mason.GridPlacementCompatType {
    @objc get
  }
  @objc public var value: Swift.Int16 {
    @objc get
  }
  @objc public var cssValue: Swift.String {
    @objc get
  }
  @objc public var jsonValue: Swift.String? {
    @objc get
  }
  @objc public static let Auto: Mason.GridPlacementCompat
  @objc deinit
}
@objcMembers @objc(MasonDimensionRectCompat) public class MasonDimensionRectCompat : ObjectiveC.NSObject {
  @objc public var left: Mason.MasonDimensionCompat
  @objc public var right: Mason.MasonDimensionCompat
  @objc public var top: Mason.MasonDimensionCompat
  @objc public var bottom: Mason.MasonDimensionCompat
  @objc public init(_ left: Mason.MasonDimensionCompat, _ right: Mason.MasonDimensionCompat, _ top: Mason.MasonDimensionCompat, _ bottom: Mason.MasonDimensionCompat)
  public init(_ rect: Mason.MasonRect<Mason.MasonDimension>)
  @objc deinit
}
@objcMembers @objc(MasonLengthPercentageAutoRectCompat) public class MasonLengthPercentageAutoRectCompat : ObjectiveC.NSObject {
  @objc public var left: Mason.MasonLengthPercentageAutoCompat
  @objc public var right: Mason.MasonLengthPercentageAutoCompat
  @objc public var top: Mason.MasonLengthPercentageAutoCompat
  @objc public var bottom: Mason.MasonLengthPercentageAutoCompat
  @objc public init(_ left: Mason.MasonLengthPercentageAutoCompat, _ right: Mason.MasonLengthPercentageAutoCompat, _ top: Mason.MasonLengthPercentageAutoCompat, _ bottom: Mason.MasonLengthPercentageAutoCompat)
  public init(_ rect: Mason.MasonRect<Mason.MasonLengthPercentageAuto>)
  @objc deinit
}
@objcMembers @objc(MasonLengthPercentageRectCompat) public class MasonLengthPercentageRectCompat : ObjectiveC.NSObject {
  @objc public var left: Mason.MasonLengthPercentageCompat
  @objc public var right: Mason.MasonLengthPercentageCompat
  @objc public var top: Mason.MasonLengthPercentageCompat
  @objc public var bottom: Mason.MasonLengthPercentageCompat
  @objc public init(_ left: Mason.MasonLengthPercentageCompat, _ right: Mason.MasonLengthPercentageCompat, _ top: Mason.MasonLengthPercentageCompat, _ bottom: Mason.MasonLengthPercentageCompat)
  public init(_ rect: Mason.MasonRect<Mason.MasonLengthPercentage>)
  @objc deinit
}
public struct MasonRect<T> {
  public init(_ left: T, _ right: T, _ top: T, _ bottom: T)
  public init(uniform: T)
}
public let MasonDimensionRectAuto: Mason.MasonRect<Mason.MasonDimension>
public let MasonLengthPercentageAutoRectAuto: Mason.MasonRect<Mason.MasonLengthPercentageAuto>
public let MasonDimensionRectMaxPercentWH: Mason.MasonRect<Mason.MasonDimension>
public let MasonLengthPercentageAutoRectMaxPercentWH: Mason.MasonRect<Mason.MasonLengthPercentageAuto>
public let MasonLengthPercentageRectMaxPercentWH: Mason.MasonRect<Mason.MasonLengthPercentage>
public let MasonDimensionRectZero: Mason.MasonRect<Mason.MasonDimension>
public let MasonLengthPercentageAutoRectZero: Mason.MasonRect<Mason.MasonLengthPercentageAuto>
public let MasonLengthPercentageRectZero: Mason.MasonRect<Mason.MasonLengthPercentage>
@_inheritsConvenienceInitializers @objc(MasonStyle) @objcMembers public class MasonStyle : ObjectiveC.NSObject {
  @objc public var nativePtr: Swift.OpaquePointer? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
  @objc public var display: Mason.Display {
    @objc get
    @objc set
  }
  @objc public var position: Mason.Position {
    @objc get
    @objc set
  }
  @objc public var direction: Mason.Direction {
    @objc get
    @objc set
  }
  @objc public var flexDirection: Mason.FlexDirection {
    @objc get
    @objc set
  }
  @objc public var flexWrap: Mason.FlexWrap {
    @objc get
    @objc set
  }
  @objc public var overflow: Mason.Overflow {
    @objc get
    @objc set
  }
  @objc public var overflowX: Mason.Overflow {
    @objc get
    @objc set
  }
  @objc public var overflowY: Mason.Overflow {
    @objc get
    @objc set
  }
  @objc public var alignItems: Mason.AlignItems {
    @objc get
    @objc set
  }
  @objc public var alignSelf: Mason.AlignSelf {
    @objc get
    @objc set
  }
  @objc public var alignContent: Mason.AlignContent {
    @objc get
    @objc set
  }
  @objc public var justifyItems: Mason.JustifyItems {
    @objc get
    @objc set
  }
  @objc public var justifySelf: Mason.JustifySelf {
    @objc get
    @objc set
  }
  @objc public var justifyContent: Mason.JustifyContent {
    @objc get
    @objc set
  }
  public var inset: Mason.MasonRect<Mason.MasonLengthPercentageAuto> {
    get
    set
  }
  @objc public var insetCompat: Mason.MasonLengthPercentageAutoRectCompat {
    @objc get
    @objc set
  }
  @objc public func setInsetLeft(_ value: Swift.Float, _ type: Swift.Int)
  public var leftInset: Mason.MasonLengthPercentageAuto {
    get
    set
  }
  @objc public func setInsetRight(_ value: Swift.Float, _ type: Swift.Int)
  public var rightInset: Mason.MasonLengthPercentageAuto {
    get
    set
  }
  @objc public func setInsetTop(_ value: Swift.Float, _ type: Swift.Int)
  public var topInset: Mason.MasonLengthPercentageAuto {
    get
    set
  }
  @objc public func setInsetBottom(_ value: Swift.Float, _ type: Swift.Int)
  public var bottomInset: Mason.MasonLengthPercentageAuto {
    get
    set
  }
  @objc public func setInsetWithValueType(_ value: Swift.Float, _ type: Swift.Int)
  public var margin: Mason.MasonRect<Mason.MasonLengthPercentageAuto> {
    get
    set
  }
  @objc public var marginCompat: Mason.MasonLengthPercentageAutoRectCompat {
    @objc get
    @objc set
  }
  @objc public func setMarginLeft(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMarginRight(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMarginTop(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMarginBottom(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMarginWithValueType(_ value: Swift.Float, _ type: Swift.Int)
  public var padding: Mason.MasonRect<Mason.MasonLengthPercentage> {
    get
    set
  }
  @objc public var paddingCompat: Mason.MasonLengthPercentageRectCompat {
    @objc get
    @objc set
  }
  @objc public func setPaddingLeft(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setPaddingRight(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setPaddingTop(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setPaddingBottom(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setPaddingWithValueType(_ value: Swift.Float, _ type: Swift.Int)
  public var border: Mason.MasonRect<Mason.MasonLengthPercentage> {
    get
    set
  }
  @objc public var borderCompat: Mason.MasonLengthPercentageRectCompat {
    @objc get
    @objc set
  }
  @objc public func setBorderLeft(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setBorderRight(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setBorderTop(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setBorderBottom(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setBorderWithValueType(_ value: Swift.Float, _ type: Swift.Int)
  @objc public var flexGrow: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var flexShrink: Swift.Float {
    @objc get
    @objc set
  }
  public var flexBasis: Mason.MasonDimension {
    get
    set
  }
  @objc public func setFlexBasis(_ value: Swift.Float, _ type: Swift.Int)
  public var scrollBarWidth: Mason.MasonDimension {
    get
    set
  }
  @objc public func setScrollBarWidth(_ value: Swift.Float)
  public var minSize: Mason.MasonSize<Mason.MasonDimension> {
    get
    set
  }
  @objc public var minSizeCompat: Mason.MasonDimensionSizeCompat {
    @objc get
    @objc set
  }
  @objc public func setMinSizeWidth(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMinSizeHeight(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMinSizeWidthHeight(_ value: Swift.Float, _ type: Swift.Int)
  public var size: Mason.MasonSize<Mason.MasonDimension> {
    get
    set
  }
  @objc public var sizeCompat: Mason.MasonDimensionSizeCompat {
    @objc get
    @objc set
  }
  @objc public var sizeCompatWidth: Mason.MasonDimensionCompat {
    @objc get
    @objc set
  }
  @objc public var sizeCompatHeight: Mason.MasonDimensionCompat {
    @objc get
    @objc set
  }
  @objc public func setSizeWidth(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setSizeHeight(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setSizeWidthHeight(_ value: Swift.Float, _ type: Swift.Int)
  public var maxSize: Mason.MasonSize<Mason.MasonDimension> {
    get
    set
  }
  @objc public var maxSizeCompat: Mason.MasonDimensionSizeCompat {
    @objc get
    @objc set
  }
  @objc public func setMaxSizeWidth(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMaxSizeHeight(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMaxSizeWidthHeight(_ value: Swift.Float, _ type: Swift.Int)
  public var gap: Mason.MasonSize<Mason.MasonLengthPercentage> {
    get
    set
  }
  @objc public var gapCompat: Mason.MasonLengthPercentageSizeCompat {
    @objc get
    @objc set
  }
  @objc public func setGapRow(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setGapColumn(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setRowGap(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setColumnGap(_ value: Swift.Float, _ type: Swift.Int)
  public var aspectRatio: Swift.Float? {
    get
    set
  }
  @objc public var gridAutoRows: [Mason.MinMax] {
    @objc get
    @objc set
  }
  @objc public var gridAutoColumns: [Mason.MinMax] {
    @objc get
    @objc set
  }
  @objc public var gridAutoFlow: Mason.GridAutoFlow {
    @objc get
    @objc set
  }
  public var gridColumn: Mason.Line<Mason.GridPlacement> {
    get
    set
  }
  public var gridColumnStart: Mason.GridPlacement {
    get
    set
  }
  public var gridColumnEnd: Mason.GridPlacement {
    get
    set
  }
  @objc public var gridColumnCompat: Mason.LineGridPlacementCompat {
    @objc get
    @objc set
  }
  @objc public var gridColumnStartCompat: Mason.GridPlacementCompat {
    @objc get
    @objc set
  }
  @objc public var gridColumnEndCompat: Mason.GridPlacementCompat {
    @objc get
    @objc set
  }
  public var gridRow: Mason.Line<Mason.GridPlacement> {
    get
    set
  }
  public var gridRowStart: Mason.GridPlacement {
    get
    set
  }
  public var gridRowEnd: Mason.GridPlacement {
    get
    set
  }
  @objc public var gridRowCompat: Mason.LineGridPlacementCompat {
    @objc get
    @objc set
  }
  @objc public var gridRowStartCompat: Mason.GridPlacementCompat {
    @objc get
    @objc set
  }
  @objc public var gridRowEndCompat: Mason.GridPlacementCompat {
    @objc get
    @objc set
  }
  @objc public var gridTemplateRows: [Mason.TrackSizingFunction] {
    @objc get
    @objc set
  }
  @objc public var gridTemplateColumns: [Mason.TrackSizingFunction] {
    @objc get
    @objc set
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc(MasonDimensionCompatType) public enum MasonDimensionCompatType : Swift.Int, Swift.RawRepresentable {
  case Auto
  case Points
  case Percent
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.MasonDimensionCompatType.RawValue {
    get
  }
  public init?(rawValue: Mason.MasonDimensionCompatType.RawValue)
}
@objc(MasonLengthPercentageAutoCompatType) public enum MasonLengthPercentageAutoCompatType : Swift.Int, Swift.RawRepresentable {
  case Auto
  case Points
  case Percent
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.MasonLengthPercentageAutoCompatType.RawValue {
    get
  }
  public init?(rawValue: Mason.MasonLengthPercentageAutoCompatType.RawValue)
}
@objc(MasonLengthPercentageCompatType) public enum MasonLengthPercentageCompatType : Swift.Int, Swift.RawRepresentable {
  case Points
  case Percent
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.MasonLengthPercentageCompatType.RawValue {
    get
  }
  public init?(rawValue: Mason.MasonLengthPercentageCompatType.RawValue)
}
public func MasonDimensionFromPoints(value: Swift.Float) -> Mason.MasonDimension
public func MasonDimensionFromPercent(value: Swift.Float) -> Mason.MasonDimension
public let MasonDimensionAuto: Mason.MasonDimension
public enum MasonDimension : Swift.Codable {
  case Auto
  case Points(Swift.Float)
  case Percent(Swift.Float)
  public var cssValue: Swift.String {
    get
  }
  public var jsonValue: Swift.String? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public func MasonLengthPercentageFromPoints(value: Swift.Float) -> Mason.MasonLengthPercentage
public func MasonLengthPercentageFromPercent(value: Swift.Float) -> Mason.MasonLengthPercentage
public let MasonLengthPercentageZero: Mason.MasonLengthPercentage
public enum MasonLengthPercentage : Swift.Codable {
  case Points(Swift.Float)
  case Percent(Swift.Float)
  public var cssValue: Swift.String {
    get
  }
  public var jsonValue: Swift.String? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public func MasonLengthPercentageAutoFromPoints(value: Swift.Float) -> Mason.MasonLengthPercentageAuto
public func MasonLengthPercentageAutoFromPercent(value: Swift.Float) -> Mason.MasonLengthPercentageAuto
public let MasonLengthPercentageAutoAuto: Mason.MasonLengthPercentageAuto
public let MasonLengthPercentageAutoZero: Mason.MasonLengthPercentageAuto
public enum MasonLengthPercentageAuto : Swift.Codable {
  case Auto
  case Points(Swift.Float)
  case Percent(Swift.Float)
  public var cssValue: Swift.String {
    get
  }
  public var jsonValue: Swift.String? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(AlignItems) public enum AlignItems : Swift.Int, Swift.RawRepresentable {
  case Normal = -1
  case Start
  case End
  case Center
  case Baseline
  case Stretch
  case FlexStart
  case FlexEnd
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.AlignItems.RawValue {
    get
  }
  public init?(rawValue: Mason.AlignItems.RawValue)
}
@objc(AlignSelf) public enum AlignSelf : Swift.Int, Swift.RawRepresentable {
  case Normal = -1
  case Start
  case End
  case Center
  case Baseline
  case Stretch
  case FlexStart
  case FlexEnd
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.AlignSelf.RawValue {
    get
  }
  public init?(rawValue: Mason.AlignSelf.RawValue)
}
@objc(AlignContent) public enum AlignContent : Swift.Int, Swift.RawRepresentable {
  case Normal = -1
  case Start
  case End
  case Center
  case Stretch
  case SpaceBetween
  case SpaceAround
  case SpaceEvenly
  case FlexStart
  case FlexEnd
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.AlignContent.RawValue {
    get
  }
  public init?(rawValue: Mason.AlignContent.RawValue)
}
@objc(Direction) public enum Direction : Swift.Int, Swift.RawRepresentable {
  case Inherit
  case LTR
  case RTL
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.Direction.RawValue {
    get
  }
  public init?(rawValue: Mason.Direction.RawValue)
}
@objc(Display) public enum Display : Swift.Int, Swift.RawRepresentable {
  case None
  case Flex
  case Grid
  case Block
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.Display.RawValue {
    get
  }
  public init?(rawValue: Mason.Display.RawValue)
}
@objc(FlexDirection) public enum FlexDirection : Swift.Int, Swift.RawRepresentable {
  case Row
  case Column
  case RowReverse
  case ColumnReverse
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.FlexDirection.RawValue {
    get
  }
  public init?(rawValue: Mason.FlexDirection.RawValue)
}
@objc(JustifyItems) public enum JustifyItems : Swift.Int, Swift.RawRepresentable {
  case Normal = -1
  case Start
  case End
  case Center
  case Baseline
  case Stretch
  case FlexStart
  case FlexEnd
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.JustifyItems.RawValue {
    get
  }
  public init?(rawValue: Mason.JustifyItems.RawValue)
}
@objc(JustifySelf) public enum JustifySelf : Swift.Int, Swift.RawRepresentable {
  case Normal = -1
  case Start
  case End
  case Center
  case Baseline
  case Stretch
  case FlexStart
  case FlexEnd
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.JustifySelf.RawValue {
    get
  }
  public init?(rawValue: Mason.JustifySelf.RawValue)
}
@objc(JustifyContent) public enum JustifyContent : Swift.Int, Swift.RawRepresentable {
  case Normal = -1
  case Start
  case End
  case Center
  case Stretch
  case SpaceBetween
  case SpaceAround
  case SpaceEvenly
  case FlexStart
  case FlexEnd
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.JustifyContent.RawValue {
    get
  }
  public init?(rawValue: Mason.JustifyContent.RawValue)
}
@objc(Overflow) public enum Overflow : Swift.Int, Swift.RawRepresentable {
  case Unset
  case Visible
  case Hidden
  case Scroll
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.Overflow.RawValue {
    get
  }
  public init?(rawValue: Mason.Overflow.RawValue)
}
@objc(Position) public enum Position : Swift.Int, Swift.RawRepresentable {
  case Relative
  case Absolute
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.Position.RawValue {
    get
  }
  public init?(rawValue: Mason.Position.RawValue)
}
@objc(FlexWrap) public enum FlexWrap : Swift.Int, Swift.RawRepresentable {
  case NoWrap
  case Wrap
  case WrapReverse
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.FlexWrap.RawValue {
    get
  }
  public init?(rawValue: Mason.FlexWrap.RawValue)
}
@objc(FlexGridAutoFlowWrap) public enum GridAutoFlow : Swift.Int, Swift.RawRepresentable {
  case Row
  case Column
  case RowDense
  case ColumnDense
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.GridAutoFlow.RawValue {
    get
  }
  public init?(rawValue: Mason.GridAutoFlow.RawValue)
}
public enum GridPlacement : Swift.Codable {
  case Auto
  case Line(Swift.Int16)
  case Span(Swift.Int16)
  public var jsonValue: Swift.String? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(GridPlacementCompatType) public enum GridPlacementCompatType : Swift.Int, Swift.RawRepresentable {
  case Auto
  case Line
  case Span
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.GridPlacementCompatType.RawValue {
    get
  }
  public init?(rawValue: Mason.GridPlacementCompatType.RawValue)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(GridTrackRepetition) public class GridTrackRepetition : ObjectiveC.NSObject {
  @objc public var type: Swift.Int32 {
    @objc get
  }
  @objc public var value: Swift.UInt16 {
    @objc get
  }
  @objc public static let AutoFill: Mason.GridTrackRepetition
  @objc public static let AutoFit: Mason.GridTrackRepetition
  @objc public static func Count(_ value: Swift.UInt16) -> Mason.GridTrackRepetition
  @objc deinit
}
extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var rootView: UIKit.UIView? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static func createGridView() -> UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public static func createFlexView() -> UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public static func createBlockView() -> UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) dynamic public var mason: Mason.MasonNode {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var masonPtr: Swift.Int64 {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var masonNodePtr: Swift.Int64 {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var masonStylePtr: Swift.Int64 {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var masonPtrs: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isMasonEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var style: Mason.MasonStyle {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addSubviews(_ views: [UIKit.UIView])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addSubviews(_ views: [UIKit.UIView], at index: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func configure(_ block: (Mason.MasonNode) -> Swift.Void)
  @objc @_Concurrency.MainActor(unsafe) dynamic public var inBatch: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var display: Mason.Display {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var _position: Mason.Position {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var direction: Mason.Direction {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var flexDirection: Mason.FlexDirection {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var flexWrap: Mason.FlexWrap {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var overflow: Mason.Overflow {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var overflowX: Mason.Overflow {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var overflowY: Mason.Overflow {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var alignItems: Mason.AlignItems {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var alignSelf: Mason.AlignSelf {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var alignContent: Mason.AlignContent {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var justifyItems: Mason.JustifyItems {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var justifySelf: Mason.JustifySelf {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var justifyContent: Mason.JustifyContent {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var flexGrow: Swift.Float {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var flexShrink: Swift.Float {
    @objc get
    @objc set(value)
  }
  @_Concurrency.MainActor(unsafe) public var scrollBarWidth: Mason.MasonDimension {
    get
    set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var scrollBarWidthCompat: Mason.MasonDimensionCompat {
    @objc get
    @objc set(value)
  }
  @_Concurrency.MainActor(unsafe) public var flexBasis: Mason.MasonDimension {
    get
    set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var flexBasisCompat: Mason.MasonDimensionCompat {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var aspectRatio: Swift.Float {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var gridAutoRows: Swift.Array<Mason.MinMax> {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var gridAutoColumns: Swift.Array<Mason.MinMax> {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var gridAutoFlow: Mason.GridAutoFlow {
    @objc get
    @objc set(value)
  }
  @_Concurrency.MainActor(unsafe) public var gridColumn: Mason.Line<Mason.GridPlacement> {
    get
    set(value)
  }
  @_Concurrency.MainActor(unsafe) public var gridColumnStart: Mason.GridPlacement {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var gridColumnEnd: Mason.GridPlacement {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var gridColumnCompat: Mason.LineGridPlacementCompat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var gridColumnStartCompat: Mason.GridPlacementCompat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var gridColumnEndCompat: Mason.GridPlacementCompat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var gridRow: Mason.Line<Mason.GridPlacement> {
    get
    set(value)
  }
  @_Concurrency.MainActor(unsafe) public var gridRowStart: Mason.GridPlacement {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var gridRowEnd: Mason.GridPlacement {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var gridRowCompat: Mason.LineGridPlacementCompat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var gridRowStartCompat: Mason.GridPlacementCompat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var gridRowEndCompat: Mason.GridPlacementCompat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var gridTemplateRows: Swift.Array<Mason.TrackSizingFunction> {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var gridTemplateColumns: Swift.Array<Mason.TrackSizingFunction> {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setPadding(_ left: Swift.Float, _ right: Swift.Float, _ top: Swift.Float, _ bottom: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getPadding() -> Mason.MasonLengthPercentageRectCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setPaddingLeft(_ left: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setPaddingRight(_ right: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setPaddingTop(_ top: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setPaddingBottom(_ bottom: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getPaddingLeft() -> Mason.MasonLengthPercentageCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getPaddingRight() -> Mason.MasonLengthPercentageCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getPaddingTop() -> Mason.MasonLengthPercentageCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getPaddingBottom() -> Mason.MasonLengthPercentageCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setBorder(_ left: Swift.Float, _ top: Swift.Float, _ right: Swift.Float, _ bottom: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getBorder() -> Mason.MasonLengthPercentageRectCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setBorderLeft(_ left: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setBorderRight(_ right: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setBorderTop(_ top: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setBorderBottom(_ bottom: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getBorderLeft() -> Mason.MasonLengthPercentageCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getBorderRight() -> Mason.MasonLengthPercentageCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getBorderBottom() -> Mason.MasonLengthPercentageCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getBorderTop() -> Mason.MasonLengthPercentageCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setMargin(_ left: Swift.Float, _ top: Swift.Float, _ right: Swift.Float, _ bottom: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getMargin() -> Mason.MasonLengthPercentageAutoRectCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setMarginLeft(_ left: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setMarginRight(_ right: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setMarginTop(_ top: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setMarginBottom(_ bottom: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getMarginLeft() -> Mason.MasonLengthPercentageAutoCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getMarginRight() -> Mason.MasonLengthPercentageAutoCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getMarginTop() -> Mason.MasonLengthPercentageAutoCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getMarginBottom() -> Mason.MasonLengthPercentageAutoCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setInset(_ left: Swift.Float, _ top: Swift.Float, _ right: Swift.Float, _ bottom: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getInset() -> Mason.MasonLengthPercentageAutoRectCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setInsetLeft(_ left: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setInsetRight(_ right: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setInsetTop(_ top: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setInsetBottom(_ bottom: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getInsetLeft() -> Mason.MasonLengthPercentageAutoCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getInsetRight() -> Mason.MasonLengthPercentageAutoCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getInsetTop() -> Mason.MasonLengthPercentageAutoCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getInsetBottom() -> Mason.MasonLengthPercentageAutoCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setMinSize(_ width: Swift.Float, _ height: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getMinSize() -> Mason.MasonDimensionSizeCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setMinSizeWidth(_ width: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setMinSizeHeight(_ height: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getMinSizeWidth() -> Mason.MasonDimensionCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getMinSizeHeight() -> Mason.MasonDimensionCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setSize(_ width: Swift.Float, _ height: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setSizeWidth(_ width: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setSizeHeight(_ height: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getSize() -> Mason.MasonDimensionSizeCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getSizeWidth() -> Mason.MasonDimensionCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getSizeHeight() -> Mason.MasonDimensionCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setMaxSize(_ width: Swift.Float, _ height: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getMaxSize() -> Mason.MasonDimensionSizeCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setMaxSizeWidth(_ width: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setMaxSizeHeight(_ height: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getMaxSizeWidth() -> Mason.MasonDimensionCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getMaxSizeHeight() -> Mason.MasonDimensionCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setGap(_ width: Swift.Float, _ height: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setGapWithWidthHeightType(_ width: Swift.Float, _ width_type: Swift.Int, _ height: Swift.Float, _ height_type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getGap() -> Mason.MasonLengthPercentageSizeCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setRowGap(_ row: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setColumnGap(_ column: Swift.Float, _ type: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getRowGap() -> Mason.MasonLengthPercentageCompat
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getColumnGap() -> Mason.MasonLengthPercentageCompat
}
extension Mason.MasonDimensionCompatType : Swift.Equatable {}
extension Mason.MasonDimensionCompatType : Swift.Hashable {}
extension Mason.MasonLengthPercentageAutoCompatType : Swift.Equatable {}
extension Mason.MasonLengthPercentageAutoCompatType : Swift.Hashable {}
extension Mason.MasonLengthPercentageCompatType : Swift.Equatable {}
extension Mason.MasonLengthPercentageCompatType : Swift.Hashable {}
extension Mason.AlignItems : Swift.Equatable {}
extension Mason.AlignItems : Swift.Hashable {}
extension Mason.AlignSelf : Swift.Equatable {}
extension Mason.AlignSelf : Swift.Hashable {}
extension Mason.AlignContent : Swift.Equatable {}
extension Mason.AlignContent : Swift.Hashable {}
extension Mason.Direction : Swift.Equatable {}
extension Mason.Direction : Swift.Hashable {}
extension Mason.Display : Swift.Equatable {}
extension Mason.Display : Swift.Hashable {}
extension Mason.FlexDirection : Swift.Equatable {}
extension Mason.FlexDirection : Swift.Hashable {}
extension Mason.JustifyItems : Swift.Equatable {}
extension Mason.JustifyItems : Swift.Hashable {}
extension Mason.JustifySelf : Swift.Equatable {}
extension Mason.JustifySelf : Swift.Hashable {}
extension Mason.JustifyContent : Swift.Equatable {}
extension Mason.JustifyContent : Swift.Hashable {}
extension Mason.Overflow : Swift.Equatable {}
extension Mason.Overflow : Swift.Hashable {}
extension Mason.Position : Swift.Equatable {}
extension Mason.Position : Swift.Hashable {}
extension Mason.FlexWrap : Swift.Equatable {}
extension Mason.FlexWrap : Swift.Hashable {}
extension Mason.GridAutoFlow : Swift.Equatable {}
extension Mason.GridAutoFlow : Swift.Hashable {}
extension Mason.GridPlacementCompatType : Swift.Equatable {}
extension Mason.GridPlacementCompatType : Swift.Hashable {}
